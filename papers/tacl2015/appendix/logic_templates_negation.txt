LEXICON
"is was are","(S[0]\\NP)/NP","(lambda f (lambda g (exists x (and (g x) (f x)))))","F"
"not","(N/N)","(lambda f (lambda x (not (f x))))","F"
"not","(NP/NP)","(lambda f (lambda x (not (f x))))","F"
"not","(S[0]\\NP)/(S[0]\\NP)","(lambda f g (exists x (and (g x) (not (f (lambda y (= y x)))))))","F"
"not","(S[0]\\NP)\\(S[0]\\NP)","(lambda f g (exists x (and (g x) (not (f (lambda y (= y x)))))))","F"
"what how","NP/N","(lambda f (lambda x (and (= query-var x) (f x))))","F"
".*","(N\\N)/N","(lambda f (lambda g (lambda x (and (g x) (exists y (and (f y) ((word-rel \"<lc_word>\") x y)))))))","F"
".*","(NP\\NP)/N","(lambda f (lambda g (lambda x (and (g x) (exists y (and (f y) ((word-rel \"<lc_word>\") x y)))))))","F"
".*","(NP\\NP)/NP","(lambda f (lambda g (lambda x (and (g x) (exists y (and (f y) ((word-rel \"<lc_word>\") x y)))))))","F"
".*","(S[0]\\NP)/NP","(lambda f (lambda g (exists x (and (g x) (exists y (and (f y) ((word-rel \"<lc_word>\") x y)))))))","F"
".*","(S[0]\\NP)","(lambda g (exists x (and (g x) ((word-cat \"<lc_word>\") x))))","F"
".*","(S[0]\\NP)/PP","(lambda f (lambda g (exists x (and (g x) (exists y (and (f y) ((word-rel \"<lc_word>_<arg_2>\") x y)))))))","F"
".*","((S[0]\\NP)/PP)/NP","(lambda h (lambda f (lambda g (exists x (and (g x) (exists y (and (f y) ((word-rel \"<lc_word>_<arg_2>\") x y))) (exists y (and (h y) ((word-rel \"<lc_word>\") x y))))))))","F"
".*","((S[0]\\NP)/PP)/PP","(lambda h (lambda f (lambda g (exists x (and (g x) (exists y (and (f y) ((word-rel \"<lc_word>_<arg_2>\") x y))) (exists y (and (h y) ((word-rel \"<lc_word>_<arg_3>\") x y))))))))","F"
".*","(((S[0]\\NP)/PP)/PP)/NP","(lambda i (lambda h (lambda f (lambda g (exists x (and (g x) (exists y (and (f y) ((word-rel \"<lc_word>_<arg_2>\") x y))) (exists y (and (h y) ((word-rel \"<lc_word>_<arg_3>\") x y))) (exists y (and (i y) ((word-rel \"<lc_word>\") x y)))))))))","F"
".*","((S[0]\\NP)/NP)/PP","(lambda h (lambda f (lambda g (exists x (and (g x) (exists y (and (h y) ((word-rel \"<lc_word>_<arg_3>\") x y))) (exists y (and (f y) ((word-rel \"<lc_word>\") x y))))))))","F"
".*","(S[0]\\NP)/(S[0]\\NP)","(lambda f x (f x))","F"
".*","(S[0]\\NP)\\(S[0]\\NP)","(lambda f x (f x))","F"
".*","(S[1]\\NP)/(S[0]\\NP)","(lambda f x (f x))","F"
".*","(NP/N)\\NP","(lambda f (lambda g (lambda x (and (g x) (exists y (and (f y) ((word-rel \"<lc_word>\") y x)))))))","F"
".*","NP/N","(lambda f f)","F"
".*","PP/NP","(lambda f f)","F"
".*","N/N","(lambda f (lambda x (and ((word-cat \"<lc_word>\") x) (f x))))","F"
".*","(N/N)/(N/N)","(lambda f (lambda g (f g)))","F"
".*","N\\N","(lambda f (lambda x (and ((word-cat \"<lc_word>\") x) (f x))))","F"
".*","N","(lambda x ((word-cat \"<lc_word>\") x))","F"
".*","N/PP","(lambda f (lambda x (exists y (and ((word-cat \"<lc_word>\") x) ((word-rel \"<lc_word>_<arg_1>\") x y) (f y)))))","F"
".*","(N/PP)/PP","(lambda g (lambda f (lambda x (exists y z (and ((word-cat \"<lc_word>\") x) ((word-rel \"<lc_word>_<arg_1>\") x y) (f y) ((word-rel \"<lc_word>_<arg_2>\") x z) (g z))))))","F"
".*","NP","(lambda x ((word-cat \"<lc_word>\") x))","F"
".*","NP/PP","(lambda f (lambda x (exists y (and ((word-cat \"<lc_word>\") x) ((word-rel \"<lc_word>_<arg_1>\") x y) (f y)))))","F"
".*","(NP/PP)/PP","(lambda g (lambda f (lambda x (exists y z (and ((word-cat \"<lc_word>\") x) ((word-rel \"<lc_word>_<arg_1>\") x y) (f y) ((word-rel \"<lc_word>_<arg_2>\") x z) (g z))))))","F"
".*","(S[wq]/(S[dcl]\\NP))","(lambda f (f (lambda x (= query-var x))))","F"
".*","(S[wq]/(S[dcl]/NP))","(lambda f (f (lambda x (= query-var x))))","F"
".*","(NP/(S[dcl]\\NP))","(lambda f (lambda y (f (lambda x (= y x)))))","F"
".*","(NP/(S[dcl]/NP))","(lambda f (lambda y (f (lambda x (= y x)))))","F"
".*","((NP\\NP)/(S[0]\\NP))","(lambda f (lambda g (lambda x (and (g x) (f (lambda y (= y x )))))))","F"
".*","conj","conj","F"

BINARY RULES
",","NP","NP\\NP","(lambda $L $R (lambda f (lambda x (and (f x) ($R x)))))"
",","N","N","(lambda $L $R $R)"
",","N","NP","(lambda $L $R $R)"
",","NP","NP","(lambda $L $R $R)"
"conj","N","(N[0]\\N)","(lambda $L $R (lambda f (lambda x (forall (pred (set f $R)) (pred x)))))"
"conj","N","(NP[0]\\N)","(lambda $L $R (lambda f (lambda x (forall (pred (set f $R)) (pred x)))))"
"conj","N","(NP[0]\\NP)","(lambda $L $R (lambda f (lambda x (forall (pred (set f $R)) (pred x)))))"
"conj","NP","(NP[0]\\NP)","(lambda $L $R (lambda f (lambda x (forall (pred (set f $R)) (pred x)))))"
"N",",","N","(lambda $L $R $L)"
"N",",","NP","(lambda $L $R $L)"
"NP",",","NP","(lambda $L $R $L)"
"NP",":","NP","(lambda $L $R $L)"
"NP","NP","NP","(lambda $L $R $R)"
"S[0]",".","S[0]","(lambda $L $R $L)"
"(S[0]\\NP)",".","(S[0]\\NP)","(lambda $L $R $L)"

UNARY RULES
"S[0]\\NP","NP\\NP","(lambda $1 (lambda f ($1 f)))"
"S[0]/NP","NP\\NP","(lambda $1 (lambda f ($1 f)))"
"N","NP","(lambda $1 $1)"
"N","(S[0]/(S[0]\\NP))","(lambda $1 (lambda f (f $1)))"
"NP","(S[0]/(S[0]\\NP))","(lambda $1 (lambda f (f $1)))"
"NP","S[dcl]","(lambda $1 $1)"


